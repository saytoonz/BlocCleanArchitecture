// Mocks generated by Mockito 5.3.2 from annotations
// in bloc_clean_architecture/test/features/trivial/presentation/bloc/trivial_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:bloc_clean_architecture/core/errors/app_error.dart' as _i5;
import 'package:bloc_clean_architecture/core/presentation/util/input_converter.dart'
    as _i4;
import 'package:bloc_clean_architecture/core/use_cases/use_case.dart' as _i9;
import 'package:bloc_clean_architecture/features/trivial/domain/entities/trivia_entity.dart'
    as _i8;
import 'package:bloc_clean_architecture/features/trivial/domain/repositories/trivia_repo.dart'
    as _i3;
import 'package:bloc_clean_architecture/features/trivial/domain/use_cases/get_concrete_trivial_use_case.dart'
    as _i10;
import 'package:bloc_clean_architecture/features/trivial/domain/use_cases/get_random_trivia_use_case.dart'
    as _i6;
import 'package:either_dart/either.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTriviaRepo_1 extends _i1.SmartFake implements _i3.TriviaRepo {
  _FakeTriviaRepo_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [InputConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockInputConverter extends _i1.Mock implements _i4.InputConverter {
  MockInputConverter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Either<_i5.AppError, int> stringToUnsignedInteger(String? str) =>
      (super.noSuchMethod(
        Invocation.method(
          #stringToUnsignedInteger,
          [str],
        ),
        returnValue: _FakeEither_0<_i5.AppError, int>(
          this,
          Invocation.method(
            #stringToUnsignedInteger,
            [str],
          ),
        ),
      ) as _i2.Either<_i5.AppError, int>);
}

/// A class which mocks [GetRandomTrivialUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRandomTrivialUseCase extends _i1.Mock
    implements _i6.GetRandomTrivialUseCase {
  MockGetRandomTrivialUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TriviaRepo get trivialRepo => (super.noSuchMethod(
        Invocation.getter(#trivialRepo),
        returnValue: _FakeTriviaRepo_1(
          this,
          Invocation.getter(#trivialRepo),
        ),
      ) as _i3.TriviaRepo);
  @override
  _i7.Future<_i2.Either<_i5.AppError, _i8.TriviaEntity>> call(
          _i9.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i7.Future<_i2.Either<_i5.AppError, _i8.TriviaEntity>>.value(
                _FakeEither_0<_i5.AppError, _i8.TriviaEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i5.AppError, _i8.TriviaEntity>>);
}

/// A class which mocks [GetConcreteTrivialUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetConcreteTrivialUseCase extends _i1.Mock
    implements _i10.GetConcreteTrivialUseCase {
  MockGetConcreteTrivialUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TriviaRepo get trivialRepo => (super.noSuchMethod(
        Invocation.getter(#trivialRepo),
        returnValue: _FakeTriviaRepo_1(
          this,
          Invocation.getter(#trivialRepo),
        ),
      ) as _i3.TriviaRepo);
  @override
  _i7.Future<_i2.Either<_i5.AppError, _i8.TriviaEntity>> call(
          _i10.Params? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i7.Future<_i2.Either<_i5.AppError, _i8.TriviaEntity>>.value(
                _FakeEither_0<_i5.AppError, _i8.TriviaEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i5.AppError, _i8.TriviaEntity>>);
}
